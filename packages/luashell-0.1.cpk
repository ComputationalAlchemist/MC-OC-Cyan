{version="0.1",name="luashell",depends={"init","libserialization"},contents={["/bin/lua.lua"]="local component = require(\"component\")\13\nlocal package = require(\"package\")\13\nlocal term = require(\"term\")\13\nlocal serialization = require(\"serialization\")\13\nlocal shell = require(\"shell\")\13\n\13\nlocal args, options = shell.parse(...)\13\nlocal env = setmetatable({}, {__index = _ENV})\13\n\13\nif #args > 0 then\13\n  local script, reason = loadfile(args[1], nil, env)\13\n  if not script then\13\n    io.stderr:write(tostring(reason) .. \"\\n\")\13\n    os.exit(false)\13\n  end\13\n  local result, reason = pcall(script, table.unpack(args, 2))\13\n  if not result then\13\n    io.stderr:write(reason)\13\n    os.exit(false)\13\n  end\13\nend\13\n\13\nif #args == 0 or options.i then\13\n  local function optrequire(...)\13\n    local success, module = pcall(require, ...)\13\n    if success then\13\n      return module\13\n    end\13\n  end\13\n  setmetatable(env, {__index = function(t, k)\13\n    return _ENV[k] or optrequire(k)\13\n  end})\13\n\13\n  local history = {}\13\n\13\n  component.gpu.setForeground(0xFFFFFF)\13\n  term.write(\"Lua 5.2.3 Copyright (C) 1994-2013 Lua.org, PUC-Rio\\n\")\13\n  component.gpu.setForeground(0xFFFF00)\13\n  term.write(\"Enter a statement and hit enter to evaluate it.\\n\")\13\n  term.write(\"Prefix an expression with '=' to show its value.\\n\")\13\n  term.write(\"Press Ctrl+C to exit the interpreter.\\n\")\13\n  component.gpu.setForeground(0xFFFFFF)\13\n\13\n  while term.isAvailable() do\13\n    local foreground = component.gpu.setForeground(0x00FF00)\13\n    term.write(tostring(env._PROMPT or \"lua> \"))\13\n    component.gpu.setForeground(foreground)\13\n    local command = term.read(history)\13\n    if command == nil then -- eof\13\n      return\13\n    end\13\n    while #history > 10 do\13\n      table.remove(history, 1)\13\n    end\13\n    local code, reason\13\n    if string.sub(command, 1, 1) == \"=\" then\13\n      code, reason = load(\"return \" .. string.sub(command, 2), \"=stdin\", \"t\", env)\13\n    else\13\n      code, reason = load(command, \"=stdin\", \"t\", env)\13\n    end\13\n    if code then\13\n      local result = table.pack(xpcall(code, debug.traceback))\13\n      if not result[1] then\13\n        if type(result[2]) == \"table\" and result[2].reason == \"terminated\" then\13\n          os.exit(result[2].code)\13\n        end\13\n        io.stderr:write(tostring(result[2]) .. \"\\n\")\13\n      else\13\n        for i = 2, result.n do\13\n          term.write(serialization.serialize(result[i], true) .. \"\\t\", true)\13\n        end\13\n        if term.getCursor() > 1 then\13\n          term.write(\"\\n\")\13\n        end\13\n      end\13\n    else\13\n      io.stderr:write(tostring(reason) .. \"\\n\")\13\n    end\13\n  end\13\nend",["/usr/man/lua"]="NAME\13\n  lua - a simple Lua interpreter\13\n\13\nSYNOPSIS\13\n  lua\13\n\13\nDESCRIPTION\13\n  Launches a command line that can be used to evaluate Lua statements and expressions. This can be very useful for testing out commands. Note that the interpreter will automatically try to resolve undefined globals using `require`, i.e. it will try to load a package with the specified name.\13\n\13\nEXAMPLES\13\n  lua\13\n    Launches the Lua interpreter."},conflicts={}}