{name="libcrypto",conflicts={},depends={},contents={["/lib/sha2.lua"]="-- Taken from http://lua-users.org/wiki/SecureHashAlgorithm\13\n\13\n-- SHA-256 code in Lua 5.2; based on the pseudo-code from\13\n-- Wikipedia (http://en.wikipedia.org/wiki/SHA-2)\13\n\13\n\13\nlocal band, rrotate, bxor, rshift, bnot =\13\n  bit32.band, bit32.rrotate, bit32.bxor, bit32.rshift, bit32.bnot\13\n\13\nlocal string, setmetatable, assert = string, setmetatable, assert\13\n\13\n_ENV = nil\13\n\13\n-- Initialize table of round constants\13\n-- (first 32 bits of the fractional parts of the cube roots of the first\13\n-- 64 primes 2..311):\13\nlocal k = {\13\n   0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,\13\n   0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\13\n   0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,\13\n   0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\13\n   0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\13\n   0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\13\n   0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,\13\n   0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\13\n   0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,\13\n   0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\13\n   0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,\13\n   0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\13\n   0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,\13\n   0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\13\n   0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\13\n   0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2,\13\n}\13\n\13\n\13\n-- transform a string of bytes in a string of hexadecimal digits\13\nlocal function str2hexa (s)\13\n  local h = string.gsub(s, \".\", function(c)\13\n              return string.format(\"%02x\", string.byte(c))\13\n            end)\13\n  return h\13\nend\13\n\13\n\13\n-- transform number 'l' in a big-endian sequence of 'n' bytes\13\n-- (coded as a string)\13\nlocal function num2s (l, n)\13\n  local s = \"\"\13\n  for i = 1, n do\13\n    local rem = l % 256\13\n    s = string.char(rem) .. s\13\n    l = (l - rem) / 256\13\n  end\13\n  return s\13\nend\13\n\13\n-- transform the big-endian sequence of four bytes starting at\13\n-- index 'i' in 's' into a number\13\nlocal function s232num (s, i)\13\n  local n = 0\13\n  for i = i, i + 3 do\13\n    n = n*256 + string.byte(s, i)\13\n  end\13\n  return n\13\nend\13\n\13\n\13\n-- append the bit '1' to the message\13\n-- append k bits '0', where k is the minimum number >= 0 such that the\13\n-- resulting message length (in bits) is congruent to 448 (mod 512)\13\n-- append length of message (before pre-processing), in bits, as 64-bit\13\n-- big-endian integer\13\nlocal function preproc (msg, len)\13\n  local extra = 64 - ((len + 1 + 8) % 64)\13\n  len = num2s(8 * len, 8)    -- original len in bits, coded\13\n  msg = msg .. \"\\128\" .. string.rep(\"\\0\", extra) .. len\13\n  assert(#msg % 64 == 0)\13\n  return msg\13\nend\13\n\13\n\13\nlocal function initH224 (H)\13\n  -- (second 32 bits of the fractional parts of the square roots of the\13\n  -- 9th through 16th primes 23..53)\13\n  H[1] = 0xc1059ed8\13\n  H[2] = 0x367cd507\13\n  H[3] = 0x3070dd17\13\n  H[4] = 0xf70e5939\13\n  H[5] = 0xffc00b31\13\n  H[6] = 0x68581511\13\n  H[7] = 0x64f98fa7\13\n  H[8] = 0xbefa4fa4\13\n  return H\13\nend\13\n\13\n\13\nlocal function initH256 (H)\13\n  -- (first 32 bits of the fractional parts of the square roots of the\13\n  -- first 8 primes 2..19):\13\n  H[1] = 0x6a09e667\13\n  H[2] = 0xbb67ae85\13\n  H[3] = 0x3c6ef372\13\n  H[4] = 0xa54ff53a\13\n  H[5] = 0x510e527f\13\n  H[6] = 0x9b05688c\13\n  H[7] = 0x1f83d9ab\13\n  H[8] = 0x5be0cd19\13\n  return H\13\nend\13\n\13\n\13\nlocal function digestblock (msg, i, H)\13\n\13\n    -- break chunk into sixteen 32-bit big-endian words w[1..16]\13\n    local w = {}\13\n    for j = 1, 16 do\13\n      w[j] = s232num(msg, i + (j - 1)*4)\13\n    end\13\n\13\n    -- Extend the sixteen 32-bit words into sixty-four 32-bit words:\13\n    for j = 17, 64 do\13\n      local v = w[j - 15]\13\n      local s0 = bxor(rrotate(v, 7), rrotate(v, 18), rshift(v, 3))\13\n      v = w[j - 2]\13\n      local s1 = bxor(rrotate(v, 17), rrotate(v, 19), rshift(v, 10))\13\n      w[j] = w[j - 16] + s0 + w[j - 7] + s1\13\n    end\13\n\13\n    -- Initialize hash value for this chunk:\13\n    local a, b, c, d, e, f, g, h =\13\n        H[1], H[2], H[3], H[4], H[5], H[6], H[7], H[8]\13\n\13\n    -- Main loop:\13\n    for i = 1, 64 do\13\n      local s0 = bxor(rrotate(a, 2), rrotate(a, 13), rrotate(a, 22))\13\n      local maj = bxor(band(a, b), band(a, c), band(b, c))\13\n      local t2 = s0 + maj\13\n      local s1 = bxor(rrotate(e, 6), rrotate(e, 11), rrotate(e, 25))\13\n      local ch = bxor (band(e, f), band(bnot(e), g))\13\n      local t1 = h + s1 + ch + k[i] + w[i]\13\n\13\n      h = g\13\n      g = f\13\n      f = e\13\n      e = d + t1\13\n      d = c\13\n      c = b\13\n      b = a\13\n      a = t1 + t2\13\n    end\13\n\13\n    -- Add (mod 2^32) this chunk's hash to result so far:\13\n    H[1] = band(H[1] + a)\13\n    H[2] = band(H[2] + b)\13\n    H[3] = band(H[3] + c)\13\n    H[4] = band(H[4] + d)\13\n    H[5] = band(H[5] + e)\13\n    H[6] = band(H[6] + f)\13\n    H[7] = band(H[7] + g)\13\n    H[8] = band(H[8] + h)\13\n\13\nend\13\n\13\n\13\nlocal function finalresult224 (H)\13\n  -- Produce the final hash value (big-endian):\13\n  return\13\n    str2hexa(num2s(H[1], 4)..num2s(H[2], 4)..num2s(H[3], 4)..num2s(H[4], 4)..\13\n             num2s(H[5], 4)..num2s(H[6], 4)..num2s(H[7], 4))\13\nend\13\n\13\n\13\nlocal function finalresult256 (H)\13\n  -- Produce the final hash value (big-endian):\13\n  return\13\n    str2hexa(num2s(H[1], 4)..num2s(H[2], 4)..num2s(H[3], 4)..num2s(H[4], 4)..\13\n             num2s(H[5], 4)..num2s(H[6], 4)..num2s(H[7], 4)..num2s(H[8], 4))\13\nend\13\n\13\n\13\n----------------------------------------------------------------------\13\nlocal HH = {}    -- to reuse\13\n\13\nlocal function hash224 (msg)\13\n  msg = preproc(msg, #msg)\13\n  local H = initH224(HH)\13\n\13\n  -- Process the message in successive 512-bit (64 bytes) chunks:\13\n  for i = 1, #msg, 64 do\13\n    digestblock(msg, i, H)\13\n  end\13\n\13\n  return finalresult224(H)\13\nend\13\n\13\n\13\nlocal function hash256 (msg)\13\n  msg = preproc(msg, #msg)\13\n  local H = initH256(HH)\13\n\13\n  -- Process the message in successive 512-bit (64 bytes) chunks:\13\n  for i = 1, #msg, 64 do\13\n    digestblock(msg, i, H)\13\n  end\13\n\13\n  return finalresult256(H)\13\nend\13\n----------------------------------------------------------------------\13\nlocal mt = {}\13\n\13\nlocal function new256 ()\13\n  local o = {H = initH256({}), msg = \"\", len = 0}\13\n  setmetatable(o, mt)\13\n  return o\13\nend\13\n\13\nmt.__index = mt\13\n\13\nfunction mt:add (m)\13\n  self.msg = self.msg .. m\13\n  self.len = self.len + #m\13\n  local t = 0\13\n  while #self.msg - t >= 64 do\13\n    digestblock(self.msg, t + 1, self.H)\13\n    t = t + 64 \13\n  end\13\n  self.msg = self.msg:sub(t + 1, -1)\13\nend\13\n\13\n\13\nfunction mt:close ()\13\n  self.msg = preproc(self.msg, self.len)\13\n  self:add(\"\")\13\n  return finalresult256(self.H)\13\nend\13\n----------------------------------------------------------------------\13\n\13\nreturn {\13\n  hash224 = hash224,\13\n  hash256 = hash256,\13\n  new256 = new256,\13\n}",["/lib/crypto.lua"]="local sha2 = require(\"sha2\")\13\nlocal crypto = {}\13\n\13\ncrypto.sha256 = sha2.hash256\13\ncrypto.sha224 = sha2.hash224\13\ncrypto.sha256obj = sha2.new256\13\n\13\nreturn crypto"},version="0.1.1"}