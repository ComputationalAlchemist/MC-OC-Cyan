{name="libcyan",contents={["/lib/cyan.lua"]="local cyan = {}\13\n\13\nlocal serialization = require(\"serialization\")\13\nlocal filesystem = require(\"filesystem\")\13\nlocal internet = require(\"internet\")\13\n\13\n-- Internet utilities\13\n\13\nfunction cyan.readremote(source)\13\n\9local text = \"\"\13\n\9for line in internet.request(source) do\13\n\9\9if #line == 0 then\13\n\9\9\9-- do nothing\13\n\9\9elseif #line >= 2 and line:sub(#line-1) == \"\\r\\n\" then\13\n\9\9\9text = text .. line:sub(1, #line - 2) .. \"\\n\"\13\n\9\9elseif line:sub(#line) == \"\\n\" then\13\n\9\9\9text = text .. line\13\n\9\9else\13\n\9\9\9text = text .. line .. \"\\n\"\13\n\9\9end\13\n\9end\13\n\9return text\13\nend\13\n\13\nfunction cyan.readremoteserialized(source)\13\n\9return serialization.unserialize(cyan.readremote(source))\13\nend\13\n\13\n-- IO utilities\13\n\13\nfunction cyan.readall(source)\13\n\9local f, err = io.open(source)\13\n\9if not f then\13\n\9\9error(\"Cannot read \" .. source .. \": \" .. err)\13\n\9end\13\n\9local out = f:read(\"*a\")\13\n\9assert(out)\13\n\9f:close()\13\n\9return out\13\nend\13\n\13\nfunction cyan.readserialized(source)\13\n\9return serialization.unserialize(cyan.readall(source))\13\nend\13\n\13\nfunction cyan.writeall(target, data)\13\n\9local f, err = io.open(target, \"w\")\13\n\9if not f then\13\n\9\9error(\"Cannot write \" .. target .. \": \" .. err)\13\n\9end\13\n\9local out, err = f:write(data)\13\n\9if not out then\13\n\9\9error(\"Cannot write \" .. target .. \": \" .. err)\13\n\9end\13\n\9f:close()\13\nend\13\n\13\nfunction cyan.writeserialized(target, data)\13\n\9cyan.writeall(target, serialization.serialize(data))\13\nend\13\n\13\nfunction cyan.isDirectoryEmpty(dir)\13\n\9local listing, err = filesystem.list(dir)\13\n\9if not listing then\13\n\9\9error(\"Cannot list directory\" .. dir .. \": \" .. err)\13\n\9end\13\n\9local empty = true\13\n\9for entry in listing do\13\n\9\9empty = false\13\n\9end\13\n\9return empty\13\nend\13\n\13\nfunction cyan.removeSingleFile(file)\13\n\9if filesystem.isDirectory(file) then\13\n\9\9error(\"Cannot remove file \" .. file .. \": Not supposed to be a directory!\")\13\n\9end\13\n\9if not filesystem.exists(file) then\13\n\9\9error(\"Cannot remove file \" .. file .. \": Does not exist!\")\13\n\9end\13\n\9local out, err = filesystem.remove(file) -- TODO: Check error returning from this.\13\n\9if not out then\13\n\9\9error(\"Cannot remove file \" .. file .. \": \" .. err)\13\n\9end\13\nend\13\n\13\nfunction cyan.makeParentDirectory(file)\13\n\9local parent = filesystem.path(file)\13\n\9if not filesystem.exists(parent) then\13\n\9\9local out, err = filesystem.makeDirectory(parent)\13\n\9\9if not out then\13\n\9\9\9error(\"Cannot make parent directory \" .. parent .. \": \" .. err)\13\n\9\9end\13\n\9elseif not filesystem.isDirectory(parent) then\13\n\9\9error(\"Parent directory is not a directory: \" .. parent)\13\n\9end\13\nend\13\n\13\n-- Table utilities\13\n\13\nfunction cyan.keylist(map)\13\n\9local out = {}\13\n\9for k, _ in pairs(map) do\13\n\9\9table.insert(out, k)\13\n\9end\13\n\9return out\13\nend\13\n\13\nfunction cyan.valueset(list)\13\n\9local out = {}\13\n\9for _, v in ipairs(list) do\13\n\9\9out[v] = true\13\n\9end\13\n\9return out\13\nend\13\n\13\nfunction cyan.instance(class, object)\13\n\9return setmetatable(object or {}, {__index=class})\13\nend\13\n\13\nfunction cyan.writeinstance(target, self)\13\n\9local meta = getmetatable(self)\13\n\9setmetatable(self, {})\13\n\9cyan.writeserialized(target, self)\13\n\9setmetatable(self, meta)\13\nend\13\n\13\n-- String utilities\13\n\13\nfunction cyan.cut(str, pattern, errmsg)\13\n\9at = str:find(pattern)\13\n\9if not at then\13\n\9\9if errmsg then\13\n\9\9\9error(errmsg)\13\n\9\9end\13\n\9\9return str, nil\13\n\9end\13\n\9return str:sub(1, at - 1), str:sub(at + 1)\13\nend\13\n\13\nfunction cyan.ltrim(str)\13\n\9if not str then return end\13\n\9index = str:find(\"[^ \\t\\r\\n]\")\13\n\9if not index then return end\13\n\9return str:sub(index)\13\nend\13\n\13\nfunction cyan.rtrim(str)\13\n\9if not str then return end\13\n\9return str:match(\"^(.*[^ \\t\\r\\n])[ \\t\\r\\n]*$\")\13\nend\13\n\13\nfunction cyan.trim(str)\13\n\9return cyan.rtrim(cyan.ltrim(str))\13\nend\13\n\13\nreturn cyan\13\n"},depends={"init","libserialization","libinternet"},version="0.3",conflicts={}}