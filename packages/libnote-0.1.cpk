{name="libnote",contents={["/lib/note.lua"]="--Provides all music notes in range of computer.beep in MIDI and frequency form\13\n--Author: Vexatos\13\nlocal computer = require(\"computer\")\13\n\13\nlocal note = {}\13\n--The table that maps note names to their respective MIDI codes\13\nlocal notes = {}\13\n--The reversed table \"notes\"\13\nlocal reverseNotes = {}\13\n\13\ndo\13\n  --All the base notes\13\n  local tempNotes = {\13\n    \"c\",\13\n    \"c#\",\13\n    \"d\",\13\n    \"d#\",\13\n    \"e\",\13\n    \"f\",\13\n    \"f#\",\13\n    \"g\",\13\n    \"g#\",\13\n    \"a\",\13\n    \"a#\",\13\n    \"b\"\13\n    }\13\n  --The table containing all the standard notes and # semitones in correct order, temporarily\13\n  local sNotes = {}\13\n  --The table containing all the b semitones\13\n  local bNotes = {}\13\n\13\n  --Registers all possible notes in order\13\n  do\13\n    table.insert(sNotes,\"a0\")\13\n    table.insert(sNotes,\"a#0\")\13\n    table.insert(bNotes,\"bb0\")\13\n    table.insert(sNotes,\"b0\")\13\n    for i = 1,6 do\13\n      for _,v in ipairs(tempNotes) do\13\n        table.insert(sNotes,v..tostring(i))\13\n        if #v == 1 and v ~= \"c\" and v ~= \"f\" then\13\n          table.insert(bNotes,v..\"b\"..tostring(i))\13\n        end\13\n      end\13\n    end\13\n  end\13\n  for i=21,95 do\13\n    notes[sNotes[i-20]]=tostring(i)\13\n  end\13\n\13\n  --Reversing the whole table in reverseNotes, used for note.get\13\n  do\13\n    for k,v in pairs(notes) do\13\n      reverseNotes[tonumber(v)]=k\13\n    end\13\n  end\13\n\13\n  --This is registered after reverseNotes to avoid conflicts\13\n  for k,v in ipairs(bNotes) do\13\n    notes[v]=tostring(notes[string.gsub(v,\"(.)b(.)\",\"%1%2\")]-1)\13\n  end\13\nend\13\n\13\n--Converts string or frequency into MIDI code\13\nfunction note.midi(n)\13\n  if type(n) == \"string\" then\13\n    n = string.lower(n)\13\n    if tonumber(notes[n])~=nil then\13\n      return tonumber(notes[n])\13\n    else\13\n      error(\"Wrong input \"..tostring(n)..\" given to note.midi, needs to be <note>[semitone sign]<octave>, e.g. A#0 or Gb4\")\13\n    end\13\n  elseif type(n) == \"number\" then\13\n    return math.floor((12*math.log(n/440,2))+69)\13\n  else\13\n    error(\"Wrong input \"..tostring(n)..\" given to note.midi, needs to be a number or a string\")\13\n  end\13\nend\13\n\13\n--Converts String or MIDI code into frequency\13\nfunction note.freq(n)\13\n  if type(n) == \"string\" then\13\n    n = string.lower(n)\13\n    if tonumber(notes[n])~=nil then\13\n      return math.pow(2,(tonumber(notes[n])-69)/12)*440\13\n    else\13\n      error(\"Wrong input \"..tostring(n)..\" given to note.freq, needs to be <note>[semitone sign]<octave>, e.g. A#0 or Gb4\",2)\13\n    end\13\n  elseif type(n) == \"number\" then\13\n    return math.pow(2,(n-69)/12)*440\13\n  else\13\n    error(\"Wrong input \"..tostring(n)..\" given to note.freq, needs to be a number or a string\",2)\13\n  end\13\nend\13\n\13\n--Converts a MIDI value back into a string\13\nfunction note.name(n)\13\n  n = tonumber(n)\13\n  if reverseNotes[n] then\13\n    return string.upper(string.match(reverseNotes[n],\"^(.)\"))..string.gsub(reverseNotes[n],\"^.(.*)\",\"%1\")\13\n  else\13\n    error(\"Attempt to get a note for a non-exsisting MIDI code\",2)\13\n  end\13\nend\13\n\13\n--Converts Note block ticks (0-24) to MIDI code (34-58) and vice-versa\13\nfunction note.ticks(n)\13\n  if type(n) == \"number\" then\13\n    if n>=0 and n<=24 then\13\n      return n+34\13\n    elseif n>=34 and n<=58 then\13\n      return n-34\13\n    else\13\n      error(\"Wrong input \"..tostring(n)..\" given to note.ticks, needs to be a number [0-24 or 34-58]\",2)\13\n    end\13\n  else\13\n    error(\"Wrong input \"..tostring(n)..\" given to note.ticks, needs to be a number\",2)\13\n  end\13\nend\13\n\13\n--Plays a tone, input is either the note as a string or the MIDI code as well as the duration of the tone\13\nfunction note.play(tone,duration)\13\n  computer.beep(note.freq(tone),duration)\13\nend\13\n\13\nreturn note\13\n"},depends={},version="0.1",conflicts={}}